########## Ключевые Слова ##########

and - Используется как логическое "и"
del - Используется для удаления объектов, переменных или элементов из коллекций
from - Используется для импорта конкретной функции или класа с библиотеки
not - Используется как логическое "нет"
while - Используется для создания цикла while
as -  Используется для создания псевдонима (alias) для модуля, класса, функции или переменной.
elif - Используется в конструкции if else как дополнительное условие
global - Используется что бы объявить глобальную переменную
or - Используется как логическое "или"
with - Используется для работы с контекстными менеджерами
assert - Используется для проверки условий исключительных ситуаций во время выполнения программы. Он используется для проверки, что определенное условие истинно, и если это не так, возникает исключение AssertionError.
else - Используется в конструкции if else как логическое "иначе"
if - Используется в конструкции if else как логическое "или"
pass - Используется для того что бы сделать пустую операцию
yield - Используется в функциях-генераторах для создания итераторов. Когда функция содержит оператор yield, она становится генератором, который может порождать последовательность значений во время итерации, вместо того чтобы возвращать одно значение и завершаться.
break - Используется для прерываний 
except - Используется в конструкции try except и служит для вывода исключений
import - Используется для импортирования библиотек, классов, функций, итд
print - Используется для вывода информации в консоль
class - Используется для объявления класса
exec - Используется для выполнения динамически созданного или полученного во время выполнения кода в виде строки. Она позволяет выполнить произвольный фрагмент кода в формате строки, который интерпретируется и выполняется во время выполнения программы.
in - Используется для проверки наличия элемента в последовательности, такой как строка, список, кортеж, множество или словарь. 
raise - Используется для генерации исключений (exceptions). Когда вы вызываете raise с указанием конкретного типа исключения или экземпляра исключения, это означает, что вы сигнализируете об ошибке или некотором исключительном событии, которое произошло в вашей программе.
continue - Используется в циклах для перехода к следующей итерации цикла, игнорируя оставшуюся часть текущей итерации.
finally - Является частью конструкции try-except-finally и предоставляет возможность выполнить код независимо от того, произошло исключение или нет. Блок finally выполняется всегда, независимо от того, было ли исключение обработано в блоке except или нет
is - Используется для проверки идентичности объектов. Он сравнивает два объекта и возвращает True, если оба объекта ссылаются на одно и то же место в памяти, и False, если они разные.
return - Используется что бы вернуть что нибудь из функций
def - Используется что бы объявить функцию
for - Используется что бы сделать цикл for
lambda - Используется для создания анонимных функций. Анонимная функция, как следует из названия, является функцией без имени. Вместо того, чтобы определять функцию с помощью оператора def, мы можем использовать ключевое слово lambda для создания функции в одной строке кода.
try - Используется в контексте обработки исключений. Блок try позволяет вам написать код, в котором могут возникать исключительные ситуации (ошибки), и обрабатывать эти исключения для избежания аварийного завершения программы

########## Типы Данных ##########

True - Логическое "истина"
False - Логическое "ложь"
None - Используется что бы обозначить пустой елемент
Строки - Используется что бы обозначить что переменная именно строка, пишется как string
Числа - Используется что бы обозначить что переменная именно число, пишется как int
Числа с плавающей точкой - Используется что бы обозначить что переменная именно число с плавающей точкой, пишется как float
Списки - Используется что бы обозначить что переменная список, синтаксис - <имя переменной> = [<элементы списка через запятую>]

########## Управляющие последовательности ##########
\\ - Используется что бы в строке вывести символ \
\' - Используется что бы в строке вывести символ '
\" - Используется что бы в строке вывести символ "
\a - Используется для воспроизведения звукового сигнала (звонка)
\b - Используется что бы удалить последний символ из строчки
\f - Используется для перехода на новую страницу (подачи формы)
\n - Используется что бы вывести текст на новую строчку (Enter)
\r - Используется для возврата каретки (перевода курсора в начало строки)
\t - Используется для создания горизонтального табуляционного отступа (Tab)
\v - Используется для создания вертикального табуляционного отступа

########## Форматирование Строк ##########
%d - Десятичное число
%i - Целое число (в десятичной, восьмеричной или шестнадцатеричной системе счисления)
%o - Восьмеричное целое число
%u - Десятичное целое число (без знака)
%x - Шестнадцатеричное целое число (в нижнем регистре)
%X - Шестнадцатеричное целое число (в верхнем регистре)
%e - Число с плавающей запятой в экспоненциальной форме (в нижнем регистре)
%E - Число с плавающей запятой в экспоненциальной форме (в верхнем регистре)
%f - Число с плавающей запятой в десятичной форме
%F - Число с плавающей запятой в десятичной форме (в верхнем регистре)
%g - Число с плавающей запятой в общем формате (автоматически выбирает краткую или десятичную форму)
%G - Число с плавающей запятой в общем формате (автоматически выбирает краткую или десятичную форму, с использованием верхнего регистра)
%c - Символ (строка из одного символа или числового кода символа)
%r - Выводит строковое представление объекта (подходит для отладки)
%s - Строка (выводит строковое представление объекта)
%% - Знак процента ("%")

########## Операторы ##########
+ - Добавление
- Отнимание
* - Умножение
** - Возведение в степень
/ - Деление
// - Деление с округлением
% - Остаток
< - Меньше
> - Больше
< - Меньше равно
>= - Больше равно
== - Сравниване (Если элементы равны возвращает True)
!= - Сравнивание (Если элементы не равны возвращает True)
() - Используется для определения кортежей (tuple), группировки выражений и передачи аргументов в функции и методы.
[] - Используется для определения списков (list) и доступа к элементам списка по индексу.
{} -  Используется для определения словарей (dictionary), множеств (set) и также для обозначения блоков кода внутри циклов, условных операторов и функций.
@ - Используется в Python для декораторов, которые позволяют изменять поведение функций или классов.
, - Используется для разделения элементов в списках, кортежах, аргументах функций и других контекстах.
: - Используется для обозначения начала блока кода (например, в циклах, условных операторах, определении функций и классов).
. - Используется для доступа к атрибутам и методам объектов.
= - Используется для присваивания значения переменной или элементу списка, словаря и т.д.
; - Используется для разделения инструкций на одной строке, если требуется.
+= - Оператор присваивания с добавлением. Используется для прибавления значения к переменной и присвоения результата обратно переменной.
-= - Оператор присваивания с вычитанием. Используется для вычитания значения из переменной и присвоения результата обратно переменной.
*= - Оператор присваивания с умножением. Используется для умножения переменной на значение и присвоения результата обратно переменной.
/= - Оператор присваивания с делением. Используется для деления переменной на значение и присвоения результата обратно переменной.
//= - Оператор присваивания с целочисленным делением. Используется для целочисленного деления переменной на значение и присвоения результата обратно переменной.
%= - Оператор присваивания с получением остатка от деления. Используется для получения остатка от деления переменной на значение и присвоения результата обратно переменной.
**= - Оператор присваивания с возведением в степень. Используется для возведения переменной в степень и присвоения результата обратно переменной.

